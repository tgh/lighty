
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800100  00800100  00000d4a  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000090  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ff  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd9  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bc  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec3  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000328  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f0  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	be c0       	rjmp	.+380    	; 0x17e <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	ab c4       	rjmp	.+2390   	; 0x980 <__vector_10>
  2a:	00 00       	nop
  2c:	e0 c4       	rjmp	.+2496   	; 0x9ee <__vector_11>
  2e:	00 00       	nop
  30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
  36:	00 00       	nop
  38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b1 c0       	rjmp	.+354    	; 0x1b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ac c0       	rjmp	.+344    	; 0x1b6 <__vector_23>
  5e:	00 00       	nop
  60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
  72:	00 00       	nop
  74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
  76:	00 00       	nop
  78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	99 c0       	rjmp	.+306    	; 0x1b4 <__bad_interrupt>
  82:	00 00       	nop
  84:	97 c0       	rjmp	.+302    	; 0x1b4 <__bad_interrupt>
  86:	00 00       	nop
  88:	95 c0       	rjmp	.+298    	; 0x1b4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	93 c0       	rjmp	.+294    	; 0x1b4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
  92:	00 00       	nop
  94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
  96:	00 00       	nop
  98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	85 c0       	rjmp	.+266    	; 0x1b4 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e5 00 12 00 02 00 00 f7 00 29 00 22     .............)."
  bc:	00 00 20 01 1c 00 21 00 00 09 01 09 00 03 00 00     .. ...!.........
  cc:	3c 01 04 01 03 09 04 40 01 10 02 03 09 04 52 01     <......@......R.
  dc:	2a                                                  *

000000dd <endpoint_config_table>:
  dd:	01 c1 36 01 c0 36 00 00                             ..6..6..

000000e5 <device_descriptor>:
  e5:	12 01 00 02 00 00 00 20 c0 16 ff 0f 00 01 01 02     ....... ........
  f5:	00 01                                               ..

000000f7 <config1_descriptor>:
  f7:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 ff 00     ..).....2.......
 107:	00 00 09 21 11 01 00 01 22 1c 00 07 05 81 03 40     ...!...."......@
 117:	00 02 07 05 02 03 40 00 08                          ......@..

00000120 <rawhid_hid_report_desc>:
 120:	06 ab ff 0a 00 02 a1 01 75 08 15 00 26 ff 00 95     ........u...&...
 130:	40 09 01 81 02 95 40 09 02 91 02 c0                 @.....@.....

0000013c <string0>:
 13c:	04 03 09 04                                         ....

00000140 <string1>:
 140:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 150:	00 00                                               ..

00000152 <string2>:
 152:	2a 03 54 00 65 00 65 00 6e 00 73 00 79 00 20 00     *.T.e.e.n.s.y. .
 162:	52 00 61 00 77 00 20 00 48 00 49 00 44 00 20 00     R.a.w. .H.I.D. .
 172:	43 00 53 00 35 00 37 00 32 00 00 00                 C.S.5.7.2...

0000017e <__ctors_end>:
 17e:	11 24       	eor	r1, r1
 180:	1f be       	out	0x3f, r1	; 63
 182:	cf ef       	ldi	r28, 0xFF	; 255
 184:	da e0       	ldi	r29, 0x0A	; 10
 186:	de bf       	out	0x3e, r29	; 62
 188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_copy_data>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	e6 ed       	ldi	r30, 0xD6	; 214
 192:	fc e0       	ldi	r31, 0x0C	; 12
 194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x10>
 196:	05 90       	lpm	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	a0 30       	cpi	r26, 0x00	; 0
 19c:	b1 07       	cpc	r27, r17
 19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0xc>

000001a0 <__do_clear_bss>:
 1a0:	11 e0       	ldi	r17, 0x01	; 1
 1a2:	a0 e0       	ldi	r26, 0x00	; 0
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
 1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
 1aa:	a5 34       	cpi	r26, 0x45	; 69
 1ac:	b1 07       	cpc	r27, r17
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
 1b0:	1a d0       	rcall	.+52     	; 0x1e6 <main>
 1b2:	8f c5       	rjmp	.+2846   	; 0xcd2 <_exit>

000001b4 <__bad_interrupt>:
 1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <__vector_23>:
	}
}

// This interrupt routine is run approx 61 times per second.
ISR(TIMER0_OVF_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
	static uint8_t count=0;

	// set the do_output variable every 2 seconds
	if (++count > 122) {
 1c2:	80 91 01 01 	lds	r24, 0x0101
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 01 01 	sts	0x0101, r24
 1cc:	8b 37       	cpi	r24, 0x7B	; 123
 1ce:	28 f0       	brcs	.+10     	; 0x1da <__vector_23+0x24>
		count = 0;
 1d0:	10 92 01 01 	sts	0x0101, r1
		do_output = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 00 01 	sts	0x0100, r24
	}
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:

volatile uint8_t do_output=0;
uint8_t buffer[64];

int main(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	int8_t r;
	uint8_t i;
	uint16_t val, count=0;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	80 93 61 00 	sts	0x0061, r24
 1f0:	10 92 61 00 	sts	0x0061, r1

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 1f4:	a9 d0       	rcall	.+338    	; 0x348 <usb_init>
	while (!usb_configured()) /* wait */ ;
 1f6:	bf d0       	rcall	.+382    	; 0x376 <usb_configured>
 1f8:	88 23       	and	r24, r24
 1fa:	e9 f3       	breq	.-6      	; 0x1f6 <main+0x10>
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 200:	20 e9       	ldi	r18, 0x90	; 144
 202:	31 e0       	ldi	r19, 0x01	; 1
 204:	f9 01       	movw	r30, r18
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x1e>
	// and do whatever it does to actually be ready for input
	_delay_ms(1000);

        // Configure timer 0 to generate a timer overflow interrupt every
        // 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
        TCCR0A = 0x00;
 20e:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0x05;
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	85 bd       	out	0x25, r24	; 37
        TIMSK0 = (1<<TOIE0);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 6e 00 	sts	0x006E, r24
 21a:	c0 e9       	ldi	r28, 0x90	; 144
 21c:	d1 e0       	ldi	r29, 0x01	; 1

	while (1) {
		// if received data, do something with it
		r = usb_rawhid_recv(buffer, 0);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	ab d0       	rcall	.+342    	; 0x37c <usb_rawhid_recv>
		if (r > 0) {
 226:	18 16       	cp	r1, r24
 228:	0c f0       	brlt	.+2      	; 0x22c <main+0x46>
 22a:	82 c0       	rjmp	.+260    	; 0x330 <main+0x14a>
// PD7 --> Red 1
// PD6 --> Green 1
// PD4 --> Blue 1
			switch(buffer[0]){
 22c:	80 91 05 01 	lds	r24, 0x0105
 230:	83 36       	cpi	r24, 0x63	; 99
 232:	09 f4       	brne	.+2      	; 0x236 <main+0x50>
 234:	36 c0       	rjmp	.+108    	; 0x2a2 <main+0xbc>
 236:	84 36       	cpi	r24, 0x64	; 100
 238:	30 f4       	brcc	.+12     	; 0x246 <main+0x60>
 23a:	81 36       	cpi	r24, 0x61	; 97
 23c:	71 f0       	breq	.+28     	; 0x25a <main+0x74>
 23e:	82 36       	cpi	r24, 0x62	; 98
 240:	09 f0       	breq	.+2      	; 0x244 <main+0x5e>
 242:	76 c0       	rjmp	.+236    	; 0x330 <main+0x14a>
 244:	1c c0       	rjmp	.+56     	; 0x27e <main+0x98>
 246:	85 36       	cpi	r24, 0x65	; 101
 248:	09 f4       	brne	.+2      	; 0x24c <main+0x66>
 24a:	4f c0       	rjmp	.+158    	; 0x2ea <main+0x104>
 24c:	85 36       	cpi	r24, 0x65	; 101
 24e:	08 f4       	brcc	.+2      	; 0x252 <main+0x6c>
 250:	3a c0       	rjmp	.+116    	; 0x2c6 <main+0xe0>
 252:	86 36       	cpi	r24, 0x66	; 102
 254:	09 f0       	breq	.+2      	; 0x258 <main+0x72>
 256:	6c c0       	rjmp	.+216    	; 0x330 <main+0x14a>
 258:	5a c0       	rjmp	.+180    	; 0x30e <main+0x128>
				case 'a':
					DDRD |= (1<<PD4);
 25a:	54 9a       	sbi	0x0a, 4	; 10
					PORTD |= (1<<PD4);
 25c:	5c 9a       	sbi	0x0b, 4	; 11
 25e:	88 e8       	ldi	r24, 0x88	; 136
 260:	93 e1       	ldi	r25, 0x13	; 19
 262:	fe 01       	movw	r30, r28
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	d9 f7       	brne	.-10     	; 0x262 <main+0x7c>
					_delay_ms(500);
					PORTD &= ~(1<<PD4);
 26c:	5c 98       	cbi	0x0b, 4	; 11
 26e:	88 e8       	ldi	r24, 0x88	; 136
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	fe 01       	movw	r30, r28
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27a:	d9 f7       	brne	.-10     	; 0x272 <main+0x8c>
 27c:	59 c0       	rjmp	.+178    	; 0x330 <main+0x14a>
					_delay_ms(500);
					break;
				case 'b':
					DDRD |= (1<<PD6);
 27e:	56 9a       	sbi	0x0a, 6	; 10
					PORTD |= (1<<PD6);
 280:	5e 9a       	sbi	0x0b, 6	; 11
 282:	88 e8       	ldi	r24, 0x88	; 136
 284:	93 e1       	ldi	r25, 0x13	; 19
 286:	fe 01       	movw	r30, r28
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <main+0xa0>
					_delay_ms(500);
					PORTD &= ~(1<<PD6);
 290:	5e 98       	cbi	0x0b, 6	; 11
 292:	88 e8       	ldi	r24, 0x88	; 136
 294:	93 e1       	ldi	r25, 0x13	; 19
 296:	fe 01       	movw	r30, r28
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	d9 f7       	brne	.-10     	; 0x296 <main+0xb0>
 2a0:	47 c0       	rjmp	.+142    	; 0x330 <main+0x14a>
					_delay_ms(500);
					break;
				case 'c':
					DDRD |= (1<<PD7);
 2a2:	57 9a       	sbi	0x0a, 7	; 10
					PORTD |= (1<<PD7);
 2a4:	5f 9a       	sbi	0x0b, 7	; 11
 2a6:	88 e8       	ldi	r24, 0x88	; 136
 2a8:	93 e1       	ldi	r25, 0x13	; 19
 2aa:	fe 01       	movw	r30, r28
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b2:	d9 f7       	brne	.-10     	; 0x2aa <main+0xc4>
					_delay_ms(500);
					PORTD &= ~(1<<PD7);
 2b4:	5f 98       	cbi	0x0b, 7	; 11
 2b6:	88 e8       	ldi	r24, 0x88	; 136
 2b8:	93 e1       	ldi	r25, 0x13	; 19
 2ba:	fe 01       	movw	r30, r28
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c2:	d9 f7       	brne	.-10     	; 0x2ba <main+0xd4>
 2c4:	35 c0       	rjmp	.+106    	; 0x330 <main+0x14a>
					_delay_ms(500);
					break;
				case 'd':
					DDRD |= (1<<PD1);
 2c6:	51 9a       	sbi	0x0a, 1	; 10
					PORTD |= (1<<PD1);
 2c8:	59 9a       	sbi	0x0b, 1	; 11
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	93 e1       	ldi	r25, 0x13	; 19
 2ce:	fe 01       	movw	r30, r28
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0xe8>
					_delay_ms(500);
					PORTD &= ~(1<<PD1);
 2d8:	59 98       	cbi	0x0b, 1	; 11
 2da:	88 e8       	ldi	r24, 0x88	; 136
 2dc:	93 e1       	ldi	r25, 0x13	; 19
 2de:	fe 01       	movw	r30, r28
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e6:	d9 f7       	brne	.-10     	; 0x2de <main+0xf8>
 2e8:	23 c0       	rjmp	.+70     	; 0x330 <main+0x14a>
					_delay_ms(500);
					break;
				case 'e':
					DDRD |= (1<<PD2);
 2ea:	52 9a       	sbi	0x0a, 2	; 10
					PORTD |= (1<<PD2);
 2ec:	5a 9a       	sbi	0x0b, 2	; 11
 2ee:	88 e8       	ldi	r24, 0x88	; 136
 2f0:	93 e1       	ldi	r25, 0x13	; 19
 2f2:	fe 01       	movw	r30, r28
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fa:	d9 f7       	brne	.-10     	; 0x2f2 <main+0x10c>
					_delay_ms(500);
					PORTD &= ~(1<<PD2);
 2fc:	5a 98       	cbi	0x0b, 2	; 11
 2fe:	88 e8       	ldi	r24, 0x88	; 136
 300:	93 e1       	ldi	r25, 0x13	; 19
 302:	fe 01       	movw	r30, r28
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 308:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30a:	d9 f7       	brne	.-10     	; 0x302 <main+0x11c>
 30c:	11 c0       	rjmp	.+34     	; 0x330 <main+0x14a>
					_delay_ms(500);
					break;
				case 'f':
					DDRD |= (1<<PD3);
 30e:	53 9a       	sbi	0x0a, 3	; 10
					PORTD |= (1<<PD3);
 310:	5b 9a       	sbi	0x0b, 3	; 11
 312:	88 e8       	ldi	r24, 0x88	; 136
 314:	93 e1       	ldi	r25, 0x13	; 19
 316:	fe 01       	movw	r30, r28
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x132>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31e:	d9 f7       	brne	.-10     	; 0x316 <main+0x130>
					_delay_ms(500);
					PORTD &= ~(1<<PD3);
 320:	5b 98       	cbi	0x0b, 3	; 11
 322:	88 e8       	ldi	r24, 0x88	; 136
 324:	93 e1       	ldi	r25, 0x13	; 19
 326:	fe 01       	movw	r30, r28
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32e:	d9 f7       	brne	.-10     	; 0x326 <main+0x140>
				default:
					break;
			}
		}
		// if time to send output, transmit something interesting
		if (do_output) {
 330:	80 91 00 01 	lds	r24, 0x0100
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <main+0x154>
 338:	72 cf       	rjmp	.-284    	; 0x21e <main+0x38>
			do_output = 0;
 33a:	10 92 00 01 	sts	0x0100, r1
			//}
			//// put a count in the last 2 bytes
			//buffer[62] = count >> 8;
			//buffer[63] = count & 255;
			// send the packet
			usb_rawhid_send(buffer, 50);
 33e:	85 e0       	ldi	r24, 0x05	; 5
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	62 e3       	ldi	r22, 0x32	; 50
 344:	9c d1       	rcall	.+824    	; 0x67e <usb_rawhid_send>
 346:	6b cf       	rjmp	.-298    	; 0x21e <main+0x38>

00000348 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 34e:	80 ea       	ldi	r24, 0xA0	; 160
 350:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 354:	82 e1       	ldi	r24, 0x12	; 18
 356:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 358:	09 b4       	in	r0, 0x29	; 41
 35a:	00 fe       	sbrs	r0, 0
 35c:	fd cf       	rjmp	.-6      	; 0x358 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 35e:	80 e9       	ldi	r24, 0x90	; 144
 360:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 364:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 368:	10 92 02 01 	sts	0x0102, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 372:	78 94       	sei
}
 374:	08 95       	ret

00000376 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 376:	80 91 02 01 	lds	r24, 0x0102
}
 37a:	08 95       	ret

0000037c <usb_rawhid_recv>:
int8_t usb_rawhid_recv(uint8_t *buffer, uint8_t timeout)
{
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 37c:	20 91 02 01 	lds	r18, 0x0102
 380:	22 23       	and	r18, r18
 382:	09 f4       	brne	.+2      	; 0x386 <usb_rawhid_recv+0xa>
 384:	7a c1       	rjmp	.+756    	; 0x67a <usb_rawhid_recv+0x2fe>
	intr_state = SREG;
 386:	2f b7       	in	r18, 0x3f	; 63
	cli();
 388:	f8 94       	cli
	rx_timeout_count = timeout;
 38a:	60 93 03 01 	sts	0x0103, r22
	UENUM = RAWHID_RX_ENDPOINT;
 38e:	32 e0       	ldi	r19, 0x02	; 2
 390:	30 93 e9 00 	sts	0x00E9, r19
	// wait for data to be available in the FIFO
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 394:	40 91 e8 00 	lds	r20, 0x00E8
 398:	45 fd       	sbrc	r20, 5
 39a:	0f c0       	rjmp	.+30     	; 0x3ba <usb_rawhid_recv+0x3e>
		SREG = intr_state;
 39c:	2f bf       	out	0x3f, r18	; 63
		if (rx_timeout_count == 0) return 0;
 39e:	20 91 03 01 	lds	r18, 0x0103
 3a2:	22 23       	and	r18, r18
 3a4:	11 f4       	brne	.+4      	; 0x3aa <usb_rawhid_recv+0x2e>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
		if (!usb_configuration) return -1;
 3aa:	20 91 02 01 	lds	r18, 0x0102
 3ae:	22 23       	and	r18, r18
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <usb_rawhid_recv+0x38>
 3b2:	63 c1       	rjmp	.+710    	; 0x67a <usb_rawhid_recv+0x2fe>
		intr_state = SREG;
 3b4:	2f b7       	in	r18, 0x3f	; 63
		cli();
 3b6:	f8 94       	cli
 3b8:	eb cf       	rjmp	.-42     	; 0x390 <usb_rawhid_recv+0x14>
		UENUM = RAWHID_RX_ENDPOINT;
	}
	// read bytes from the FIFO
	#if (RAWHID_RX_SIZE >= 64)
	*buffer++ = UEDATX;
 3ba:	30 91 f1 00 	lds	r19, 0x00F1
 3be:	fc 01       	movw	r30, r24
 3c0:	31 93       	st	Z+, r19
	#endif
	#if (RAWHID_RX_SIZE >= 63)
	*buffer++ = UEDATX;
 3c2:	30 91 f1 00 	lds	r19, 0x00F1
 3c6:	dc 01       	movw	r26, r24
 3c8:	11 96       	adiw	r26, 0x01	; 1
 3ca:	3c 93       	st	X, r19
 3cc:	df 01       	movw	r26, r30
 3ce:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 62)
	*buffer++ = UEDATX;
 3d0:	80 91 f1 00 	lds	r24, 0x00F1
 3d4:	81 83       	std	Z+1, r24	; 0x01
 3d6:	fd 01       	movw	r30, r26
 3d8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 61)
	*buffer++ = UEDATX;
 3da:	80 91 f1 00 	lds	r24, 0x00F1
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	8c 93       	st	X, r24
 3e2:	df 01       	movw	r26, r30
 3e4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 60)
	*buffer++ = UEDATX;
 3e6:	80 91 f1 00 	lds	r24, 0x00F1
 3ea:	81 83       	std	Z+1, r24	; 0x01
 3ec:	fd 01       	movw	r30, r26
 3ee:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 59)
	*buffer++ = UEDATX;
 3f0:	80 91 f1 00 	lds	r24, 0x00F1
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	8c 93       	st	X, r24
 3f8:	df 01       	movw	r26, r30
 3fa:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 58)
	*buffer++ = UEDATX;
 3fc:	80 91 f1 00 	lds	r24, 0x00F1
 400:	81 83       	std	Z+1, r24	; 0x01
 402:	fd 01       	movw	r30, r26
 404:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 57)
	*buffer++ = UEDATX;
 406:	80 91 f1 00 	lds	r24, 0x00F1
 40a:	11 96       	adiw	r26, 0x01	; 1
 40c:	8c 93       	st	X, r24
 40e:	df 01       	movw	r26, r30
 410:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 56)
	*buffer++ = UEDATX;
 412:	80 91 f1 00 	lds	r24, 0x00F1
 416:	81 83       	std	Z+1, r24	; 0x01
 418:	fd 01       	movw	r30, r26
 41a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 55)
	*buffer++ = UEDATX;
 41c:	80 91 f1 00 	lds	r24, 0x00F1
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	8c 93       	st	X, r24
 424:	df 01       	movw	r26, r30
 426:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 54)
	*buffer++ = UEDATX;
 428:	80 91 f1 00 	lds	r24, 0x00F1
 42c:	81 83       	std	Z+1, r24	; 0x01
 42e:	fd 01       	movw	r30, r26
 430:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 53)
	*buffer++ = UEDATX;
 432:	80 91 f1 00 	lds	r24, 0x00F1
 436:	11 96       	adiw	r26, 0x01	; 1
 438:	8c 93       	st	X, r24
 43a:	df 01       	movw	r26, r30
 43c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 52)
	*buffer++ = UEDATX;
 43e:	80 91 f1 00 	lds	r24, 0x00F1
 442:	81 83       	std	Z+1, r24	; 0x01
 444:	fd 01       	movw	r30, r26
 446:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 51)
	*buffer++ = UEDATX;
 448:	80 91 f1 00 	lds	r24, 0x00F1
 44c:	11 96       	adiw	r26, 0x01	; 1
 44e:	8c 93       	st	X, r24
 450:	df 01       	movw	r26, r30
 452:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 50)
	*buffer++ = UEDATX;
 454:	80 91 f1 00 	lds	r24, 0x00F1
 458:	81 83       	std	Z+1, r24	; 0x01
 45a:	fd 01       	movw	r30, r26
 45c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 49)
	*buffer++ = UEDATX;
 45e:	80 91 f1 00 	lds	r24, 0x00F1
 462:	11 96       	adiw	r26, 0x01	; 1
 464:	8c 93       	st	X, r24
 466:	df 01       	movw	r26, r30
 468:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 48)
	*buffer++ = UEDATX;
 46a:	80 91 f1 00 	lds	r24, 0x00F1
 46e:	81 83       	std	Z+1, r24	; 0x01
 470:	fd 01       	movw	r30, r26
 472:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 47)
	*buffer++ = UEDATX;
 474:	80 91 f1 00 	lds	r24, 0x00F1
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	8c 93       	st	X, r24
 47c:	df 01       	movw	r26, r30
 47e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 46)
	*buffer++ = UEDATX;
 480:	80 91 f1 00 	lds	r24, 0x00F1
 484:	81 83       	std	Z+1, r24	; 0x01
 486:	fd 01       	movw	r30, r26
 488:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 45)
	*buffer++ = UEDATX;
 48a:	80 91 f1 00 	lds	r24, 0x00F1
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	8c 93       	st	X, r24
 492:	df 01       	movw	r26, r30
 494:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 44)
	*buffer++ = UEDATX;
 496:	80 91 f1 00 	lds	r24, 0x00F1
 49a:	81 83       	std	Z+1, r24	; 0x01
 49c:	fd 01       	movw	r30, r26
 49e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 43)
	*buffer++ = UEDATX;
 4a0:	80 91 f1 00 	lds	r24, 0x00F1
 4a4:	11 96       	adiw	r26, 0x01	; 1
 4a6:	8c 93       	st	X, r24
 4a8:	df 01       	movw	r26, r30
 4aa:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 42)
	*buffer++ = UEDATX;
 4ac:	80 91 f1 00 	lds	r24, 0x00F1
 4b0:	81 83       	std	Z+1, r24	; 0x01
 4b2:	fd 01       	movw	r30, r26
 4b4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 41)
	*buffer++ = UEDATX;
 4b6:	80 91 f1 00 	lds	r24, 0x00F1
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	8c 93       	st	X, r24
 4be:	df 01       	movw	r26, r30
 4c0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 40)
	*buffer++ = UEDATX;
 4c2:	80 91 f1 00 	lds	r24, 0x00F1
 4c6:	81 83       	std	Z+1, r24	; 0x01
 4c8:	fd 01       	movw	r30, r26
 4ca:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 39)
	*buffer++ = UEDATX;
 4cc:	80 91 f1 00 	lds	r24, 0x00F1
 4d0:	11 96       	adiw	r26, 0x01	; 1
 4d2:	8c 93       	st	X, r24
 4d4:	df 01       	movw	r26, r30
 4d6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 38)
	*buffer++ = UEDATX;
 4d8:	80 91 f1 00 	lds	r24, 0x00F1
 4dc:	81 83       	std	Z+1, r24	; 0x01
 4de:	fd 01       	movw	r30, r26
 4e0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 37)
	*buffer++ = UEDATX;
 4e2:	80 91 f1 00 	lds	r24, 0x00F1
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8c 93       	st	X, r24
 4ea:	df 01       	movw	r26, r30
 4ec:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 36)
	*buffer++ = UEDATX;
 4ee:	80 91 f1 00 	lds	r24, 0x00F1
 4f2:	81 83       	std	Z+1, r24	; 0x01
 4f4:	fd 01       	movw	r30, r26
 4f6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 35)
	*buffer++ = UEDATX;
 4f8:	80 91 f1 00 	lds	r24, 0x00F1
 4fc:	11 96       	adiw	r26, 0x01	; 1
 4fe:	8c 93       	st	X, r24
 500:	df 01       	movw	r26, r30
 502:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 34)
	*buffer++ = UEDATX;
 504:	80 91 f1 00 	lds	r24, 0x00F1
 508:	81 83       	std	Z+1, r24	; 0x01
 50a:	fd 01       	movw	r30, r26
 50c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 33)
	*buffer++ = UEDATX;
 50e:	80 91 f1 00 	lds	r24, 0x00F1
 512:	11 96       	adiw	r26, 0x01	; 1
 514:	8c 93       	st	X, r24
 516:	df 01       	movw	r26, r30
 518:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 32)
	*buffer++ = UEDATX;
 51a:	80 91 f1 00 	lds	r24, 0x00F1
 51e:	81 83       	std	Z+1, r24	; 0x01
 520:	fd 01       	movw	r30, r26
 522:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 31)
	*buffer++ = UEDATX;
 524:	80 91 f1 00 	lds	r24, 0x00F1
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	8c 93       	st	X, r24
 52c:	df 01       	movw	r26, r30
 52e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 30)
	*buffer++ = UEDATX;
 530:	80 91 f1 00 	lds	r24, 0x00F1
 534:	81 83       	std	Z+1, r24	; 0x01
 536:	fd 01       	movw	r30, r26
 538:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 29)
	*buffer++ = UEDATX;
 53a:	80 91 f1 00 	lds	r24, 0x00F1
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	8c 93       	st	X, r24
 542:	df 01       	movw	r26, r30
 544:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 28)
	*buffer++ = UEDATX;
 546:	80 91 f1 00 	lds	r24, 0x00F1
 54a:	81 83       	std	Z+1, r24	; 0x01
 54c:	fd 01       	movw	r30, r26
 54e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 27)
	*buffer++ = UEDATX;
 550:	80 91 f1 00 	lds	r24, 0x00F1
 554:	11 96       	adiw	r26, 0x01	; 1
 556:	8c 93       	st	X, r24
 558:	df 01       	movw	r26, r30
 55a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 26)
	*buffer++ = UEDATX;
 55c:	80 91 f1 00 	lds	r24, 0x00F1
 560:	81 83       	std	Z+1, r24	; 0x01
 562:	fd 01       	movw	r30, r26
 564:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 25)
	*buffer++ = UEDATX;
 566:	80 91 f1 00 	lds	r24, 0x00F1
 56a:	11 96       	adiw	r26, 0x01	; 1
 56c:	8c 93       	st	X, r24
 56e:	df 01       	movw	r26, r30
 570:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 24)
	*buffer++ = UEDATX;
 572:	80 91 f1 00 	lds	r24, 0x00F1
 576:	81 83       	std	Z+1, r24	; 0x01
 578:	fd 01       	movw	r30, r26
 57a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 23)
	*buffer++ = UEDATX;
 57c:	80 91 f1 00 	lds	r24, 0x00F1
 580:	11 96       	adiw	r26, 0x01	; 1
 582:	8c 93       	st	X, r24
 584:	df 01       	movw	r26, r30
 586:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 22)
	*buffer++ = UEDATX;
 588:	80 91 f1 00 	lds	r24, 0x00F1
 58c:	81 83       	std	Z+1, r24	; 0x01
 58e:	fd 01       	movw	r30, r26
 590:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 21)
	*buffer++ = UEDATX;
 592:	80 91 f1 00 	lds	r24, 0x00F1
 596:	11 96       	adiw	r26, 0x01	; 1
 598:	8c 93       	st	X, r24
 59a:	df 01       	movw	r26, r30
 59c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 20)
	*buffer++ = UEDATX;
 59e:	80 91 f1 00 	lds	r24, 0x00F1
 5a2:	81 83       	std	Z+1, r24	; 0x01
 5a4:	fd 01       	movw	r30, r26
 5a6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 19)
	*buffer++ = UEDATX;
 5a8:	80 91 f1 00 	lds	r24, 0x00F1
 5ac:	11 96       	adiw	r26, 0x01	; 1
 5ae:	8c 93       	st	X, r24
 5b0:	df 01       	movw	r26, r30
 5b2:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 18)
	*buffer++ = UEDATX;
 5b4:	80 91 f1 00 	lds	r24, 0x00F1
 5b8:	81 83       	std	Z+1, r24	; 0x01
 5ba:	fd 01       	movw	r30, r26
 5bc:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 17)
	*buffer++ = UEDATX;
 5be:	80 91 f1 00 	lds	r24, 0x00F1
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	8c 93       	st	X, r24
 5c6:	df 01       	movw	r26, r30
 5c8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 16)
	*buffer++ = UEDATX;
 5ca:	80 91 f1 00 	lds	r24, 0x00F1
 5ce:	81 83       	std	Z+1, r24	; 0x01
 5d0:	fd 01       	movw	r30, r26
 5d2:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 15)
	*buffer++ = UEDATX;
 5d4:	80 91 f1 00 	lds	r24, 0x00F1
 5d8:	11 96       	adiw	r26, 0x01	; 1
 5da:	8c 93       	st	X, r24
 5dc:	df 01       	movw	r26, r30
 5de:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 14)
	*buffer++ = UEDATX;
 5e0:	80 91 f1 00 	lds	r24, 0x00F1
 5e4:	81 83       	std	Z+1, r24	; 0x01
 5e6:	fd 01       	movw	r30, r26
 5e8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 13)
	*buffer++ = UEDATX;
 5ea:	80 91 f1 00 	lds	r24, 0x00F1
 5ee:	11 96       	adiw	r26, 0x01	; 1
 5f0:	8c 93       	st	X, r24
 5f2:	df 01       	movw	r26, r30
 5f4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 12)
	*buffer++ = UEDATX;
 5f6:	80 91 f1 00 	lds	r24, 0x00F1
 5fa:	81 83       	std	Z+1, r24	; 0x01
 5fc:	fd 01       	movw	r30, r26
 5fe:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 11)
	*buffer++ = UEDATX;
 600:	80 91 f1 00 	lds	r24, 0x00F1
 604:	11 96       	adiw	r26, 0x01	; 1
 606:	8c 93       	st	X, r24
 608:	df 01       	movw	r26, r30
 60a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 10)
	*buffer++ = UEDATX;
 60c:	80 91 f1 00 	lds	r24, 0x00F1
 610:	81 83       	std	Z+1, r24	; 0x01
 612:	fd 01       	movw	r30, r26
 614:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 9)
	*buffer++ = UEDATX;
 616:	80 91 f1 00 	lds	r24, 0x00F1
 61a:	11 96       	adiw	r26, 0x01	; 1
 61c:	8c 93       	st	X, r24
 61e:	df 01       	movw	r26, r30
 620:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 8)
	*buffer++ = UEDATX;
 622:	80 91 f1 00 	lds	r24, 0x00F1
 626:	81 83       	std	Z+1, r24	; 0x01
 628:	fd 01       	movw	r30, r26
 62a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 7)
	*buffer++ = UEDATX;
 62c:	80 91 f1 00 	lds	r24, 0x00F1
 630:	11 96       	adiw	r26, 0x01	; 1
 632:	8c 93       	st	X, r24
 634:	df 01       	movw	r26, r30
 636:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 6)
	*buffer++ = UEDATX;
 638:	80 91 f1 00 	lds	r24, 0x00F1
 63c:	81 83       	std	Z+1, r24	; 0x01
 63e:	fd 01       	movw	r30, r26
 640:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 5)
	*buffer++ = UEDATX;
 642:	80 91 f1 00 	lds	r24, 0x00F1
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	8c 93       	st	X, r24
 64a:	df 01       	movw	r26, r30
 64c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 4)
	*buffer++ = UEDATX;
 64e:	80 91 f1 00 	lds	r24, 0x00F1
 652:	81 83       	std	Z+1, r24	; 0x01
 654:	fd 01       	movw	r30, r26
 656:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 3)
	*buffer++ = UEDATX;
 658:	80 91 f1 00 	lds	r24, 0x00F1
 65c:	11 96       	adiw	r26, 0x01	; 1
 65e:	8c 93       	st	X, r24
 660:	11 97       	sbiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 2)
	*buffer++ = UEDATX;
 662:	80 91 f1 00 	lds	r24, 0x00F1
 666:	81 83       	std	Z+1, r24	; 0x01
	#endif
	#if (RAWHID_RX_SIZE >= 1)
	*buffer++ = UEDATX;
 668:	80 91 f1 00 	lds	r24, 0x00F1
 66c:	82 83       	std	Z+2, r24	; 0x02
	#endif
	// release the buffer
	UEINTX = 0x6B;
 66e:	8b e6       	ldi	r24, 0x6B	; 107
 670:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 674:	2f bf       	out	0x3f, r18	; 63
 676:	80 e4       	ldi	r24, 0x40	; 64
	return RAWHID_RX_SIZE;
 678:	08 95       	ret
 67a:	8f ef       	ldi	r24, 0xFF	; 255
}
 67c:	08 95       	ret

0000067e <usb_rawhid_send>:
int8_t usb_rawhid_send(const uint8_t *buffer, uint8_t timeout)
{
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 67e:	20 91 02 01 	lds	r18, 0x0102
 682:	22 23       	and	r18, r18
 684:	09 f4       	brne	.+2      	; 0x688 <usb_rawhid_send+0xa>
 686:	7a c1       	rjmp	.+756    	; 0x97c <usb_rawhid_send+0x2fe>
	intr_state = SREG;
 688:	2f b7       	in	r18, 0x3f	; 63
	cli();
 68a:	f8 94       	cli
	tx_timeout_count = timeout;
 68c:	60 93 04 01 	sts	0x0104, r22
	UENUM = RAWHID_TX_ENDPOINT;
 690:	31 e0       	ldi	r19, 0x01	; 1
 692:	30 93 e9 00 	sts	0x00E9, r19
	// wait for the FIFO to be ready to accept data
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 696:	40 91 e8 00 	lds	r20, 0x00E8
 69a:	45 fd       	sbrc	r20, 5
 69c:	0f c0       	rjmp	.+30     	; 0x6bc <usb_rawhid_send+0x3e>
		SREG = intr_state;
 69e:	2f bf       	out	0x3f, r18	; 63
		if (tx_timeout_count == 0) return 0;
 6a0:	20 91 04 01 	lds	r18, 0x0104
 6a4:	22 23       	and	r18, r18
 6a6:	11 f4       	brne	.+4      	; 0x6ac <usb_rawhid_send+0x2e>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	08 95       	ret
		if (!usb_configuration) return -1;
 6ac:	20 91 02 01 	lds	r18, 0x0102
 6b0:	22 23       	and	r18, r18
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <usb_rawhid_send+0x38>
 6b4:	63 c1       	rjmp	.+710    	; 0x97c <usb_rawhid_send+0x2fe>
		intr_state = SREG;
 6b6:	2f b7       	in	r18, 0x3f	; 63
		cli();
 6b8:	f8 94       	cli
 6ba:	eb cf       	rjmp	.-42     	; 0x692 <usb_rawhid_send+0x14>
		UENUM = RAWHID_TX_ENDPOINT;
	}
	// write bytes from the FIFO
	#if (RAWHID_TX_SIZE >= 64)
	UEDATX = *buffer++;
 6bc:	fc 01       	movw	r30, r24
 6be:	31 91       	ld	r19, Z+
 6c0:	30 93 f1 00 	sts	0x00F1, r19
	#endif
	#if (RAWHID_TX_SIZE >= 63)
	UEDATX = *buffer++;
 6c4:	dc 01       	movw	r26, r24
 6c6:	11 96       	adiw	r26, 0x01	; 1
 6c8:	8c 91       	ld	r24, X
 6ca:	80 93 f1 00 	sts	0x00F1, r24
 6ce:	df 01       	movw	r26, r30
 6d0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 62)
	UEDATX = *buffer++;
 6d2:	81 81       	ldd	r24, Z+1	; 0x01
 6d4:	80 93 f1 00 	sts	0x00F1, r24
 6d8:	fd 01       	movw	r30, r26
 6da:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 61)
	UEDATX = *buffer++;
 6dc:	11 96       	adiw	r26, 0x01	; 1
 6de:	8c 91       	ld	r24, X
 6e0:	80 93 f1 00 	sts	0x00F1, r24
 6e4:	df 01       	movw	r26, r30
 6e6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 60)
	UEDATX = *buffer++;
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	80 93 f1 00 	sts	0x00F1, r24
 6ee:	fd 01       	movw	r30, r26
 6f0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 59)
	UEDATX = *buffer++;
 6f2:	11 96       	adiw	r26, 0x01	; 1
 6f4:	8c 91       	ld	r24, X
 6f6:	80 93 f1 00 	sts	0x00F1, r24
 6fa:	df 01       	movw	r26, r30
 6fc:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 58)
	UEDATX = *buffer++;
 6fe:	81 81       	ldd	r24, Z+1	; 0x01
 700:	80 93 f1 00 	sts	0x00F1, r24
 704:	fd 01       	movw	r30, r26
 706:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 57)
	UEDATX = *buffer++;
 708:	11 96       	adiw	r26, 0x01	; 1
 70a:	8c 91       	ld	r24, X
 70c:	80 93 f1 00 	sts	0x00F1, r24
 710:	df 01       	movw	r26, r30
 712:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 56)
	UEDATX = *buffer++;
 714:	81 81       	ldd	r24, Z+1	; 0x01
 716:	80 93 f1 00 	sts	0x00F1, r24
 71a:	fd 01       	movw	r30, r26
 71c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 55)
	UEDATX = *buffer++;
 71e:	11 96       	adiw	r26, 0x01	; 1
 720:	8c 91       	ld	r24, X
 722:	80 93 f1 00 	sts	0x00F1, r24
 726:	df 01       	movw	r26, r30
 728:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 54)
	UEDATX = *buffer++;
 72a:	81 81       	ldd	r24, Z+1	; 0x01
 72c:	80 93 f1 00 	sts	0x00F1, r24
 730:	fd 01       	movw	r30, r26
 732:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 53)
	UEDATX = *buffer++;
 734:	11 96       	adiw	r26, 0x01	; 1
 736:	8c 91       	ld	r24, X
 738:	80 93 f1 00 	sts	0x00F1, r24
 73c:	df 01       	movw	r26, r30
 73e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 52)
	UEDATX = *buffer++;
 740:	81 81       	ldd	r24, Z+1	; 0x01
 742:	80 93 f1 00 	sts	0x00F1, r24
 746:	fd 01       	movw	r30, r26
 748:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 51)
	UEDATX = *buffer++;
 74a:	11 96       	adiw	r26, 0x01	; 1
 74c:	8c 91       	ld	r24, X
 74e:	80 93 f1 00 	sts	0x00F1, r24
 752:	df 01       	movw	r26, r30
 754:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 50)
	UEDATX = *buffer++;
 756:	81 81       	ldd	r24, Z+1	; 0x01
 758:	80 93 f1 00 	sts	0x00F1, r24
 75c:	fd 01       	movw	r30, r26
 75e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 49)
	UEDATX = *buffer++;
 760:	11 96       	adiw	r26, 0x01	; 1
 762:	8c 91       	ld	r24, X
 764:	80 93 f1 00 	sts	0x00F1, r24
 768:	df 01       	movw	r26, r30
 76a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 48)
	UEDATX = *buffer++;
 76c:	81 81       	ldd	r24, Z+1	; 0x01
 76e:	80 93 f1 00 	sts	0x00F1, r24
 772:	fd 01       	movw	r30, r26
 774:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 47)
	UEDATX = *buffer++;
 776:	11 96       	adiw	r26, 0x01	; 1
 778:	8c 91       	ld	r24, X
 77a:	80 93 f1 00 	sts	0x00F1, r24
 77e:	df 01       	movw	r26, r30
 780:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 46)
	UEDATX = *buffer++;
 782:	81 81       	ldd	r24, Z+1	; 0x01
 784:	80 93 f1 00 	sts	0x00F1, r24
 788:	fd 01       	movw	r30, r26
 78a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 45)
	UEDATX = *buffer++;
 78c:	11 96       	adiw	r26, 0x01	; 1
 78e:	8c 91       	ld	r24, X
 790:	80 93 f1 00 	sts	0x00F1, r24
 794:	df 01       	movw	r26, r30
 796:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 44)
	UEDATX = *buffer++;
 798:	81 81       	ldd	r24, Z+1	; 0x01
 79a:	80 93 f1 00 	sts	0x00F1, r24
 79e:	fd 01       	movw	r30, r26
 7a0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 43)
	UEDATX = *buffer++;
 7a2:	11 96       	adiw	r26, 0x01	; 1
 7a4:	8c 91       	ld	r24, X
 7a6:	80 93 f1 00 	sts	0x00F1, r24
 7aa:	df 01       	movw	r26, r30
 7ac:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 42)
	UEDATX = *buffer++;
 7ae:	81 81       	ldd	r24, Z+1	; 0x01
 7b0:	80 93 f1 00 	sts	0x00F1, r24
 7b4:	fd 01       	movw	r30, r26
 7b6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 41)
	UEDATX = *buffer++;
 7b8:	11 96       	adiw	r26, 0x01	; 1
 7ba:	8c 91       	ld	r24, X
 7bc:	80 93 f1 00 	sts	0x00F1, r24
 7c0:	df 01       	movw	r26, r30
 7c2:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 40)
	UEDATX = *buffer++;
 7c4:	81 81       	ldd	r24, Z+1	; 0x01
 7c6:	80 93 f1 00 	sts	0x00F1, r24
 7ca:	fd 01       	movw	r30, r26
 7cc:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 39)
	UEDATX = *buffer++;
 7ce:	11 96       	adiw	r26, 0x01	; 1
 7d0:	8c 91       	ld	r24, X
 7d2:	80 93 f1 00 	sts	0x00F1, r24
 7d6:	df 01       	movw	r26, r30
 7d8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 38)
	UEDATX = *buffer++;
 7da:	81 81       	ldd	r24, Z+1	; 0x01
 7dc:	80 93 f1 00 	sts	0x00F1, r24
 7e0:	fd 01       	movw	r30, r26
 7e2:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 37)
	UEDATX = *buffer++;
 7e4:	11 96       	adiw	r26, 0x01	; 1
 7e6:	8c 91       	ld	r24, X
 7e8:	80 93 f1 00 	sts	0x00F1, r24
 7ec:	df 01       	movw	r26, r30
 7ee:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 36)
	UEDATX = *buffer++;
 7f0:	81 81       	ldd	r24, Z+1	; 0x01
 7f2:	80 93 f1 00 	sts	0x00F1, r24
 7f6:	fd 01       	movw	r30, r26
 7f8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 35)
	UEDATX = *buffer++;
 7fa:	11 96       	adiw	r26, 0x01	; 1
 7fc:	8c 91       	ld	r24, X
 7fe:	80 93 f1 00 	sts	0x00F1, r24
 802:	df 01       	movw	r26, r30
 804:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 34)
	UEDATX = *buffer++;
 806:	81 81       	ldd	r24, Z+1	; 0x01
 808:	80 93 f1 00 	sts	0x00F1, r24
 80c:	fd 01       	movw	r30, r26
 80e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 33)
	UEDATX = *buffer++;
 810:	11 96       	adiw	r26, 0x01	; 1
 812:	8c 91       	ld	r24, X
 814:	80 93 f1 00 	sts	0x00F1, r24
 818:	df 01       	movw	r26, r30
 81a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 32)
	UEDATX = *buffer++;
 81c:	81 81       	ldd	r24, Z+1	; 0x01
 81e:	80 93 f1 00 	sts	0x00F1, r24
 822:	fd 01       	movw	r30, r26
 824:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 31)
	UEDATX = *buffer++;
 826:	11 96       	adiw	r26, 0x01	; 1
 828:	8c 91       	ld	r24, X
 82a:	80 93 f1 00 	sts	0x00F1, r24
 82e:	df 01       	movw	r26, r30
 830:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 30)
	UEDATX = *buffer++;
 832:	81 81       	ldd	r24, Z+1	; 0x01
 834:	80 93 f1 00 	sts	0x00F1, r24
 838:	fd 01       	movw	r30, r26
 83a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 29)
	UEDATX = *buffer++;
 83c:	11 96       	adiw	r26, 0x01	; 1
 83e:	8c 91       	ld	r24, X
 840:	80 93 f1 00 	sts	0x00F1, r24
 844:	df 01       	movw	r26, r30
 846:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 28)
	UEDATX = *buffer++;
 848:	81 81       	ldd	r24, Z+1	; 0x01
 84a:	80 93 f1 00 	sts	0x00F1, r24
 84e:	fd 01       	movw	r30, r26
 850:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 27)
	UEDATX = *buffer++;
 852:	11 96       	adiw	r26, 0x01	; 1
 854:	8c 91       	ld	r24, X
 856:	80 93 f1 00 	sts	0x00F1, r24
 85a:	df 01       	movw	r26, r30
 85c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 26)
	UEDATX = *buffer++;
 85e:	81 81       	ldd	r24, Z+1	; 0x01
 860:	80 93 f1 00 	sts	0x00F1, r24
 864:	fd 01       	movw	r30, r26
 866:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 25)
	UEDATX = *buffer++;
 868:	11 96       	adiw	r26, 0x01	; 1
 86a:	8c 91       	ld	r24, X
 86c:	80 93 f1 00 	sts	0x00F1, r24
 870:	df 01       	movw	r26, r30
 872:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 24)
	UEDATX = *buffer++;
 874:	81 81       	ldd	r24, Z+1	; 0x01
 876:	80 93 f1 00 	sts	0x00F1, r24
 87a:	fd 01       	movw	r30, r26
 87c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 23)
	UEDATX = *buffer++;
 87e:	11 96       	adiw	r26, 0x01	; 1
 880:	8c 91       	ld	r24, X
 882:	80 93 f1 00 	sts	0x00F1, r24
 886:	df 01       	movw	r26, r30
 888:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 22)
	UEDATX = *buffer++;
 88a:	81 81       	ldd	r24, Z+1	; 0x01
 88c:	80 93 f1 00 	sts	0x00F1, r24
 890:	fd 01       	movw	r30, r26
 892:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 21)
	UEDATX = *buffer++;
 894:	11 96       	adiw	r26, 0x01	; 1
 896:	8c 91       	ld	r24, X
 898:	80 93 f1 00 	sts	0x00F1, r24
 89c:	df 01       	movw	r26, r30
 89e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 20)
	UEDATX = *buffer++;
 8a0:	81 81       	ldd	r24, Z+1	; 0x01
 8a2:	80 93 f1 00 	sts	0x00F1, r24
 8a6:	fd 01       	movw	r30, r26
 8a8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 19)
	UEDATX = *buffer++;
 8aa:	11 96       	adiw	r26, 0x01	; 1
 8ac:	8c 91       	ld	r24, X
 8ae:	80 93 f1 00 	sts	0x00F1, r24
 8b2:	df 01       	movw	r26, r30
 8b4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 18)
	UEDATX = *buffer++;
 8b6:	81 81       	ldd	r24, Z+1	; 0x01
 8b8:	80 93 f1 00 	sts	0x00F1, r24
 8bc:	fd 01       	movw	r30, r26
 8be:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 17)
	UEDATX = *buffer++;
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	8c 91       	ld	r24, X
 8c4:	80 93 f1 00 	sts	0x00F1, r24
 8c8:	df 01       	movw	r26, r30
 8ca:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 16)
	UEDATX = *buffer++;
 8cc:	81 81       	ldd	r24, Z+1	; 0x01
 8ce:	80 93 f1 00 	sts	0x00F1, r24
 8d2:	fd 01       	movw	r30, r26
 8d4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 15)
	UEDATX = *buffer++;
 8d6:	11 96       	adiw	r26, 0x01	; 1
 8d8:	8c 91       	ld	r24, X
 8da:	80 93 f1 00 	sts	0x00F1, r24
 8de:	df 01       	movw	r26, r30
 8e0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 14)
	UEDATX = *buffer++;
 8e2:	81 81       	ldd	r24, Z+1	; 0x01
 8e4:	80 93 f1 00 	sts	0x00F1, r24
 8e8:	fd 01       	movw	r30, r26
 8ea:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 13)
	UEDATX = *buffer++;
 8ec:	11 96       	adiw	r26, 0x01	; 1
 8ee:	8c 91       	ld	r24, X
 8f0:	80 93 f1 00 	sts	0x00F1, r24
 8f4:	df 01       	movw	r26, r30
 8f6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 12)
	UEDATX = *buffer++;
 8f8:	81 81       	ldd	r24, Z+1	; 0x01
 8fa:	80 93 f1 00 	sts	0x00F1, r24
 8fe:	fd 01       	movw	r30, r26
 900:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 11)
	UEDATX = *buffer++;
 902:	11 96       	adiw	r26, 0x01	; 1
 904:	8c 91       	ld	r24, X
 906:	80 93 f1 00 	sts	0x00F1, r24
 90a:	df 01       	movw	r26, r30
 90c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 10)
	UEDATX = *buffer++;
 90e:	81 81       	ldd	r24, Z+1	; 0x01
 910:	80 93 f1 00 	sts	0x00F1, r24
 914:	fd 01       	movw	r30, r26
 916:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 9)
	UEDATX = *buffer++;
 918:	11 96       	adiw	r26, 0x01	; 1
 91a:	8c 91       	ld	r24, X
 91c:	80 93 f1 00 	sts	0x00F1, r24
 920:	df 01       	movw	r26, r30
 922:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 8)
	UEDATX = *buffer++;
 924:	81 81       	ldd	r24, Z+1	; 0x01
 926:	80 93 f1 00 	sts	0x00F1, r24
 92a:	fd 01       	movw	r30, r26
 92c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 7)
	UEDATX = *buffer++;
 92e:	11 96       	adiw	r26, 0x01	; 1
 930:	8c 91       	ld	r24, X
 932:	80 93 f1 00 	sts	0x00F1, r24
 936:	df 01       	movw	r26, r30
 938:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 6)
	UEDATX = *buffer++;
 93a:	81 81       	ldd	r24, Z+1	; 0x01
 93c:	80 93 f1 00 	sts	0x00F1, r24
 940:	fd 01       	movw	r30, r26
 942:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 5)
	UEDATX = *buffer++;
 944:	11 96       	adiw	r26, 0x01	; 1
 946:	8c 91       	ld	r24, X
 948:	80 93 f1 00 	sts	0x00F1, r24
 94c:	df 01       	movw	r26, r30
 94e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 4)
	UEDATX = *buffer++;
 950:	81 81       	ldd	r24, Z+1	; 0x01
 952:	80 93 f1 00 	sts	0x00F1, r24
 956:	fd 01       	movw	r30, r26
 958:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 3)
	UEDATX = *buffer++;
 95a:	11 96       	adiw	r26, 0x01	; 1
 95c:	8c 91       	ld	r24, X
 95e:	11 97       	sbiw	r26, 0x01	; 1
 960:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 2)
	UEDATX = *buffer++;
 964:	81 81       	ldd	r24, Z+1	; 0x01
 966:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 1)
	UEDATX = *buffer++;
 96a:	82 81       	ldd	r24, Z+2	; 0x02
 96c:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	// transmit it now
	UEINTX = 0x3A;
 970:	8a e3       	ldi	r24, 0x3A	; 58
 972:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 976:	2f bf       	out	0x3f, r18	; 63
 978:	80 e4       	ldi	r24, 0x40	; 64
	return RAWHID_TX_SIZE;
 97a:	08 95       	ret
 97c:	8f ef       	ldi	r24, 0xFF	; 255
}
 97e:	08 95       	ret

00000980 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 980:	1f 92       	push	r1
 982:	0f 92       	push	r0
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	0f 92       	push	r0
 988:	11 24       	eor	r1, r1
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 98e:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 992:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 996:	83 ff       	sbrs	r24, 3
 998:	0f c0       	rjmp	.+30     	; 0x9b8 <__vector_10+0x38>
		UENUM = 0;
 99a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 99e:	91 e0       	ldi	r25, 0x01	; 1
 9a0:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 9a4:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 9a8:	92 e2       	ldi	r25, 0x22	; 34
 9aa:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 9ae:	98 e0       	ldi	r25, 0x08	; 8
 9b0:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 9b4:	10 92 02 01 	sts	0x0102, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 9b8:	82 ff       	sbrs	r24, 2
 9ba:	12 c0       	rjmp	.+36     	; 0x9e0 <__vector_10+0x60>
 9bc:	80 91 02 01 	lds	r24, 0x0102
 9c0:	88 23       	and	r24, r24
 9c2:	71 f0       	breq	.+28     	; 0x9e0 <__vector_10+0x60>
		t = rx_timeout_count;
 9c4:	80 91 03 01 	lds	r24, 0x0103
		if (t) rx_timeout_count = --t;
 9c8:	88 23       	and	r24, r24
 9ca:	19 f0       	breq	.+6      	; 0x9d2 <__vector_10+0x52>
 9cc:	81 50       	subi	r24, 0x01	; 1
 9ce:	80 93 03 01 	sts	0x0103, r24
		t = tx_timeout_count;
 9d2:	80 91 04 01 	lds	r24, 0x0104
		if (t) tx_timeout_count = --t;
 9d6:	88 23       	and	r24, r24
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <__vector_10+0x60>
 9da:	81 50       	subi	r24, 0x01	; 1
 9dc:	80 93 04 01 	sts	0x0104, r24
	}
}
 9e0:	9f 91       	pop	r25
 9e2:	8f 91       	pop	r24
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	1f 93       	push	r17
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 a16:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 a1a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 a1e:	83 ff       	sbrs	r24, 3
 a20:	41 c1       	rjmp	.+642    	; 0xca4 <__stack+0x1a5>
                bmRequestType = UEDATX;
 a22:	90 91 f1 00 	lds	r25, 0x00F1
                bRequest = UEDATX;
 a26:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
 a2a:	40 91 f1 00 	lds	r20, 0x00F1
 a2e:	50 e0       	ldi	r21, 0x00	; 0
                wValue |= (UEDATX << 8);
 a30:	60 91 f1 00 	lds	r22, 0x00F1
 a34:	36 2f       	mov	r19, r22
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	42 2b       	or	r20, r18
 a3a:	53 2b       	or	r21, r19
                wIndex = UEDATX;
 a3c:	20 91 f1 00 	lds	r18, 0x00F1
 a40:	30 e0       	ldi	r19, 0x00	; 0
                wIndex |= (UEDATX << 8);
 a42:	e0 91 f1 00 	lds	r30, 0x00F1
 a46:	7e 2f       	mov	r23, r30
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	26 2b       	or	r18, r22
 a4c:	37 2b       	or	r19, r23
                wLength = UEDATX;
 a4e:	b0 91 f1 00 	lds	r27, 0x00F1
                wLength |= (UEDATX << 8);
 a52:	a0 91 f1 00 	lds	r26, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 a56:	62 ef       	ldi	r22, 0xF2	; 242
 a58:	60 93 e8 00 	sts	0x00E8, r22
                if (bRequest == GET_DESCRIPTOR) {
 a5c:	86 30       	cpi	r24, 0x06	; 6
 a5e:	09 f0       	breq	.+2      	; 0xa62 <__vector_11+0x74>
 a60:	57 c0       	rjmp	.+174    	; 0xb10 <__stack+0x11>
 a62:	63 eb       	ldi	r22, 0xB3	; 179
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	cb 01       	movw	r24, r22
 a68:	05 97       	sbiw	r24, 0x05	; 5
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 a6a:	fb 01       	movw	r30, r22
 a6c:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 a6e:	c5 91       	lpm	r28, Z+
 a70:	d4 91       	lpm	r29, Z
				if (desc_val != wValue) {
 a72:	c4 17       	cp	r28, r20
 a74:	d5 07       	cpc	r29, r21
 a76:	e9 f4       	brne	.+58     	; 0xab2 <__vector_11+0xc4>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 a78:	fc 01       	movw	r30, r24
 a7a:	c5 91       	lpm	r28, Z+
 a7c:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex) {
 a7e:	c2 17       	cp	r28, r18
 a80:	d3 07       	cpc	r29, r19
 a82:	b9 f4       	brne	.+46     	; 0xab2 <__vector_11+0xc4>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 a84:	02 96       	adiw	r24, 0x02	; 2
				desc_addr = (const uint8_t *)pgm_read_word(list);
 a86:	fc 01       	movw	r30, r24
 a88:	45 91       	lpm	r20, Z+
 a8a:	54 91       	lpm	r21, Z
				list += 2;
				desc_length = pgm_read_byte(list);
 a8c:	02 96       	adiw	r24, 0x02	; 2
 a8e:	fc 01       	movw	r30, r24
 a90:	84 91       	lpm	r24, Z
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 a92:	2b 2f       	mov	r18, r27
 a94:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 a96:	7a 2f       	mov	r23, r26
 a98:	60 e0       	ldi	r22, 0x00	; 0
 a9a:	26 2b       	or	r18, r22
 a9c:	37 2b       	or	r19, r23
 a9e:	2f 3f       	cpi	r18, 0xFF	; 255
 aa0:	31 05       	cpc	r19, r1
 aa2:	19 f0       	breq	.+6      	; 0xaaa <__vector_11+0xbc>
 aa4:	10 f0       	brcs	.+4      	; 0xaaa <__vector_11+0xbc>
 aa6:	2f ef       	ldi	r18, 0xFF	; 255
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	28 17       	cp	r18, r24
 aac:	50 f4       	brcc	.+20     	; 0xac2 <__vector_11+0xd4>
 aae:	82 2f       	mov	r24, r18
 ab0:	08 c0       	rjmp	.+16     	; 0xac2 <__vector_11+0xd4>
 ab2:	69 5f       	subi	r22, 0xF9	; 249
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	07 96       	adiw	r24, 0x07	; 7
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 ab8:	f0 e0       	ldi	r31, 0x00	; 0
 aba:	64 3e       	cpi	r22, 0xE4	; 228
 abc:	7f 07       	cpc	r23, r31
 abe:	a9 f6       	brne	.-86     	; 0xa6a <__vector_11+0x7c>
 ac0:	f1 c0       	rjmp	.+482    	; 0xca4 <__stack+0x1a5>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 ac2:	1e ef       	ldi	r17, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 ac4:	20 91 e8 00 	lds	r18, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	b9 01       	movw	r22, r18
 acc:	65 70       	andi	r22, 0x05	; 5
 ace:	70 70       	andi	r23, 0x00	; 0
 ad0:	61 15       	cp	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	b9 f3       	breq	.-18     	; 0xac4 <__vector_11+0xd6>
				if (i & (1<<RXOUTI)) return;	// abort
 ad6:	22 fd       	sbrc	r18, 2
 ad8:	e8 c0       	rjmp	.+464    	; 0xcaa <__stack+0x1ab>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 ada:	98 2f       	mov	r25, r24
 adc:	81 32       	cpi	r24, 0x21	; 33
 ade:	08 f0       	brcs	.+2      	; 0xae2 <__vector_11+0xf4>
 ae0:	90 e2       	ldi	r25, 0x20	; 32
 ae2:	ba 01       	movw	r22, r20
 ae4:	29 2f       	mov	r18, r25
				for (i = n; i; i--) {
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <__vector_11+0x10a>
 ae8:	db 01       	movw	r26, r22
					UEDATX = pgm_read_byte(desc_addr++);
 aea:	6f 5f       	subi	r22, 0xFF	; 255
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	fd 01       	movw	r30, r26
 af0:	34 91       	lpm	r19, Z
 af2:	30 93 f1 00 	sts	0x00F1, r19
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 af6:	21 50       	subi	r18, 0x01	; 1
 af8:	22 23       	and	r18, r18
 afa:	b1 f7       	brne	.-20     	; 0xae8 <__vector_11+0xfa>
 afc:	49 0f       	add	r20, r25
 afe:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 b00:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b02:	10 93 e8 00 	sts	0x00E8, r17
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 b06:	88 23       	and	r24, r24
 b08:	e9 f6       	brne	.-70     	; 0xac4 <__vector_11+0xd6>
 b0a:	90 32       	cpi	r25, 0x20	; 32
 b0c:	d9 f2       	breq	.-74     	; 0xac4 <__vector_11+0xd6>
 b0e:	cd c0       	rjmp	.+410    	; 0xcaa <__stack+0x1ab>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 b10:	85 30       	cpi	r24, 0x05	; 5
 b12:	59 f4       	brne	.+22     	; 0xb2a <__stack+0x2b>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b14:	8e ef       	ldi	r24, 0xFE	; 254
 b16:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b1a:	80 91 e8 00 	lds	r24, 0x00E8
 b1e:	80 ff       	sbrs	r24, 0
 b20:	fc cf       	rjmp	.-8      	; 0xb1a <__stack+0x1b>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 b22:	40 68       	ori	r20, 0x80	; 128
 b24:	40 93 e3 00 	sts	0x00E3, r20
			return;
 b28:	c0 c0       	rjmp	.+384    	; 0xcaa <__stack+0x1ab>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 b2a:	89 30       	cpi	r24, 0x09	; 9
 b2c:	49 f5       	brne	.+82     	; 0xb80 <__stack+0x81>
 b2e:	99 23       	and	r25, r25
 b30:	09 f0       	breq	.+2      	; 0xb34 <__stack+0x35>
 b32:	76 c0       	rjmp	.+236    	; 0xc20 <__stack+0x121>
			usb_configuration = wValue;
 b34:	40 93 02 01 	sts	0x0102, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b38:	8e ef       	ldi	r24, 0xFE	; 254
 b3a:	80 93 e8 00 	sts	0x00E8, r24
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	4d ed       	ldi	r20, 0xDD	; 221
 b42:	50 e0       	ldi	r21, 0x00	; 0
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 b44:	80 93 e9 00 	sts	0x00E9, r24
				en = pgm_read_byte(cfg++);
 b48:	9a 01       	movw	r18, r20
 b4a:	4f 5f       	subi	r20, 0xFF	; 255
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	f9 01       	movw	r30, r18
 b50:	94 91       	lpm	r25, Z
				UECONX = en;
 b52:	90 93 eb 00 	sts	0x00EB, r25
				if (en) {
 b56:	99 23       	and	r25, r25
 b58:	71 f0       	breq	.+28     	; 0xb76 <__stack+0x77>
					UECFG0X = pgm_read_byte(cfg++);
 b5a:	9a 01       	movw	r18, r20
 b5c:	2f 5f       	subi	r18, 0xFF	; 255
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	fa 01       	movw	r30, r20
 b62:	44 91       	lpm	r20, Z
 b64:	40 93 ec 00 	sts	0x00EC, r20
					UECFG1X = pgm_read_byte(cfg++);
 b68:	a9 01       	movw	r20, r18
 b6a:	4f 5f       	subi	r20, 0xFF	; 255
 b6c:	5f 4f       	sbci	r21, 0xFF	; 255
 b6e:	f9 01       	movw	r30, r18
 b70:	24 91       	lpm	r18, Z
 b72:	20 93 ed 00 	sts	0x00ED, r18
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 b76:	8f 5f       	subi	r24, 0xFF	; 255
 b78:	85 30       	cpi	r24, 0x05	; 5
 b7a:	21 f7       	brne	.-56     	; 0xb44 <__stack+0x45>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 b7c:	8e e1       	ldi	r24, 0x1E	; 30
 b7e:	4b c0       	rjmp	.+150    	; 0xc16 <__stack+0x117>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 b80:	88 30       	cpi	r24, 0x08	; 8
 b82:	61 f4       	brne	.+24     	; 0xb9c <__stack+0x9d>
 b84:	90 38       	cpi	r25, 0x80	; 128
 b86:	09 f0       	breq	.+2      	; 0xb8a <__stack+0x8b>
 b88:	4b c0       	rjmp	.+150    	; 0xc20 <__stack+0x121>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b8a:	80 91 e8 00 	lds	r24, 0x00E8
 b8e:	80 ff       	sbrs	r24, 0
 b90:	fc cf       	rjmp	.-8      	; 0xb8a <__stack+0x8b>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 b92:	80 91 02 01 	lds	r24, 0x0102
 b96:	80 93 f1 00 	sts	0x00F1, r24
 b9a:	80 c0       	rjmp	.+256    	; 0xc9c <__stack+0x19d>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 b9c:	88 23       	and	r24, r24
 b9e:	d1 f4       	brne	.+52     	; 0xbd4 <__stack+0xd5>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 ba0:	80 91 e8 00 	lds	r24, 0x00E8
 ba4:	80 ff       	sbrs	r24, 0
 ba6:	fc cf       	rjmp	.-8      	; 0xba0 <__stack+0xa1>
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			if (bmRequestType == 0x82) {
 ba8:	92 38       	cpi	r25, 0x82	; 130
 baa:	11 f0       	breq	.+4      	; 0xbb0 <__stack+0xb1>
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	0d c0       	rjmp	.+26     	; 0xbca <__stack+0xcb>
				UENUM = wIndex;
 bb0:	20 93 e9 00 	sts	0x00E9, r18
				if (UECONX & (1<<STALLRQ)) i = 1;
 bb4:	80 91 eb 00 	lds	r24, 0x00EB
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	25 e0       	ldi	r18, 0x05	; 5
 bbc:	96 95       	lsr	r25
 bbe:	87 95       	ror	r24
 bc0:	2a 95       	dec	r18
 bc2:	e1 f7       	brne	.-8      	; 0xbbc <__stack+0xbd>
 bc4:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 bc6:	10 92 e9 00 	sts	0x00E9, r1
			}
			UEDATX = i;
 bca:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 bce:	10 92 f1 00 	sts	0x00F1, r1
 bd2:	64 c0       	rjmp	.+200    	; 0xc9c <__stack+0x19d>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 bd4:	81 30       	cpi	r24, 0x01	; 1
 bd6:	11 f0       	breq	.+4      	; 0xbdc <__stack+0xdd>
 bd8:	83 30       	cpi	r24, 0x03	; 3
 bda:	11 f5       	brne	.+68     	; 0xc20 <__stack+0x121>
 bdc:	92 30       	cpi	r25, 0x02	; 2
 bde:	01 f5       	brne	.+64     	; 0xc20 <__stack+0x121>
 be0:	41 15       	cp	r20, r1
 be2:	51 05       	cpc	r21, r1
 be4:	e9 f4       	brne	.+58     	; 0xc20 <__stack+0x121>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 be6:	42 2f       	mov	r20, r18
 be8:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 bea:	54 2f       	mov	r21, r20
 bec:	51 50       	subi	r21, 0x01	; 1
 bee:	54 30       	cpi	r21, 0x04	; 4
 bf0:	b8 f4       	brcc	.+46     	; 0xc20 <__stack+0x121>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bf2:	9e ef       	ldi	r25, 0xFE	; 254
 bf4:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 bf8:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 bfc:	83 30       	cpi	r24, 0x03	; 3
 bfe:	09 f4       	brne	.+2      	; 0xc02 <__stack+0x103>
 c00:	51 c0       	rjmp	.+162    	; 0xca4 <__stack+0x1a5>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 c02:	89 e1       	ldi	r24, 0x19	; 25
 c04:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <__stack+0x113>
 c0e:	88 0f       	add	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	4a 95       	dec	r20
 c14:	e2 f7       	brpl	.-8      	; 0xc0e <__stack+0x10f>
 c16:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 c1a:	10 92 ea 00 	sts	0x00EA, r1
 c1e:	45 c0       	rjmp	.+138    	; 0xcaa <__stack+0x1ab>
				}
				return;
			}
		}
		if (wIndex == RAWHID_INTERFACE) {
 c20:	21 15       	cp	r18, r1
 c22:	31 05       	cpc	r19, r1
 c24:	09 f0       	breq	.+2      	; 0xc28 <__stack+0x129>
 c26:	3e c0       	rjmp	.+124    	; 0xca4 <__stack+0x1a5>
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
 c28:	91 3a       	cpi	r25, 0xA1	; 161
 c2a:	11 f5       	brne	.+68     	; 0xc70 <__stack+0x171>
 c2c:	81 30       	cpi	r24, 0x01	; 1
 c2e:	d1 f5       	brne	.+116    	; 0xca4 <__stack+0x1a5>
 c30:	80 e4       	ldi	r24, 0x40	; 64
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c32:	4e ef       	ldi	r20, 0xFE	; 254
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
				len = RAWHID_TX_SIZE;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 c34:	20 91 e8 00 	lds	r18, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	b9 01       	movw	r22, r18
 c3c:	65 70       	andi	r22, 0x05	; 5
 c3e:	70 70       	andi	r23, 0x00	; 0
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
 c44:	b9 f3       	breq	.-18     	; 0xc34 <__stack+0x135>
					if (i & (1<<RXOUTI)) return;	// abort
 c46:	22 fd       	sbrc	r18, 2
 c48:	30 c0       	rjmp	.+96     	; 0xcaa <__stack+0x1ab>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 c4a:	98 2f       	mov	r25, r24
 c4c:	81 32       	cpi	r24, 0x21	; 33
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <__stack+0x153>
 c50:	90 e2       	ldi	r25, 0x20	; 32
 c52:	29 2f       	mov	r18, r25
					for (i = n; i; i--) {
 c54:	03 c0       	rjmp	.+6      	; 0xc5c <__stack+0x15d>
						// just send zeros
						UEDATX = 0;
 c56:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 c5a:	21 50       	subi	r18, 0x01	; 1
 c5c:	22 23       	and	r18, r18
 c5e:	d9 f7       	brne	.-10     	; 0xc56 <__stack+0x157>
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
 c60:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c62:	40 93 e8 00 	sts	0x00E8, r20
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 c66:	88 23       	and	r24, r24
 c68:	29 f7       	brne	.-54     	; 0xc34 <__stack+0x135>
 c6a:	90 32       	cpi	r25, 0x20	; 32
 c6c:	19 f3       	breq	.-58     	; 0xc34 <__stack+0x135>
 c6e:	1d c0       	rjmp	.+58     	; 0xcaa <__stack+0x1ab>
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
 c70:	91 32       	cpi	r25, 0x21	; 33
 c72:	c1 f4       	brne	.+48     	; 0xca4 <__stack+0x1a5>
 c74:	89 30       	cpi	r24, 0x09	; 9
 c76:	b1 f4       	brne	.+44     	; 0xca4 <__stack+0x1a5>
 c78:	80 e4       	ldi	r24, 0x40	; 64
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 c7a:	2b ef       	ldi	r18, 0xFB	; 251
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 c7c:	90 91 e8 00 	lds	r25, 0x00E8
 c80:	92 ff       	sbrs	r25, 2
 c82:	fc cf       	rjmp	.-8      	; 0xc7c <__stack+0x17d>
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 c84:	20 93 e8 00 	sts	0x00E8, r18
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
				len = RAWHID_RX_SIZE;
				do {
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 c88:	98 2f       	mov	r25, r24
 c8a:	81 32       	cpi	r24, 0x21	; 33
 c8c:	08 f0       	brcs	.+2      	; 0xc90 <__stack+0x191>
 c8e:	90 e2       	ldi	r25, 0x20	; 32
					usb_wait_receive_out();
					// ignore incoming bytes
					usb_ack_out();
					len -= n;
 c90:	89 1b       	sub	r24, r25
				} while (len);
 c92:	a1 f7       	brne	.-24     	; 0xc7c <__stack+0x17d>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c94:	80 91 e8 00 	lds	r24, 0x00E8
 c98:	80 ff       	sbrs	r24, 0
 c9a:	fc cf       	rjmp	.-8      	; 0xc94 <__stack+0x195>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c9c:	8e ef       	ldi	r24, 0xFE	; 254
 c9e:	80 93 e8 00 	sts	0x00E8, r24
					usb_ack_out();
					len -= n;
				} while (len);
				usb_wait_in_ready();
				usb_send_in();
				return;
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <__stack+0x1ab>
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 ca4:	81 e2       	ldi	r24, 0x21	; 33
 ca6:	80 93 eb 00 	sts	0x00EB, r24
}
 caa:	ff 91       	pop	r31
 cac:	ef 91       	pop	r30
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	bf 91       	pop	r27
 cb4:	af 91       	pop	r26
 cb6:	9f 91       	pop	r25
 cb8:	8f 91       	pop	r24
 cba:	7f 91       	pop	r23
 cbc:	6f 91       	pop	r22
 cbe:	5f 91       	pop	r21
 cc0:	4f 91       	pop	r20
 cc2:	3f 91       	pop	r19
 cc4:	2f 91       	pop	r18
 cc6:	1f 91       	pop	r17
 cc8:	0f 90       	pop	r0
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	0f 90       	pop	r0
 cce:	1f 90       	pop	r1
 cd0:	18 95       	reti

00000cd2 <_exit>:
 cd2:	f8 94       	cli

00000cd4 <__stop_program>:
 cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <__stop_program>
